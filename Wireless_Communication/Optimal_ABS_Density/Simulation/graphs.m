Mmax = [577;616;438;606;644;672;711;586;476;666;669;528;816;491;672;339;414;531;435;565;416;497;489;524;431;502;520;442;388;550;382;634;736;736;505;667;734;647;358;710;571;675;487;517;619;593;433;362;591;551;383;461;593;865;657;387;505;613;577;407;495;381;525;630;453;563;505;560;304;783;625;526;467;428;436;564;396;571;648;550;424;583;647;358;602;485;364;619;762;291;443;542;626;460;500;620;660;499;599;522];
Mopt = [184;61;116;143;199;128;249;77;172;159;143;59;204;21;135;56;74;184;83;1;115;117;78;63;124;133;238;115;126;42;116;1;202;202;119;171;253;208;143;234;119;168;47;105;142;206;25;139;46;114;1;81;91;268;175;122;26;144;218;61;92;59;170;172;87;139;228;100;94;183;201;114;70;88;88;152;51;120;217;102;57;149;206;100;122;113;97;174;168;103;201;86;255;101;203;179;211;48;104;129];
Mavg = [274;323;208;277;334;346;387;262;296;329;291;254;401;218;337;166;178;299;215;252;216;251;189;265;224;279;323;255;224;274;180;332;382;382;240;362;378;352;215;365;302;331;199;207;346;288;183;202;327;258;214;230;249;486;337;191;185;304;337;213;288;208;266;307;241;298;310;260;183;420;335;244;218;204;207;290;164;269;327;251;194;296;356;158;276;252;182;320;327;175;279;283;387;233;287;315;351;269;312;241];
Ymax = [13251.19140625;14141.130859375;10048.6044921875;13897.6728515625;14787.759765625;15426.0439453125;16331.2802734375;13452.2060546875;10928.2060546875;15300.0;15352.025390625;12114.4638671875;18741.95703125;11254.587890625;15426.0439453125;7773.9111328125;9489.7734375;12178.1953125;9967.4306640625;12954.8525390625;9545.0322265625;11402.859375;11217.318359375;12022.90234375;9890.4208984375;11511.720703125;11928.74609375;10145.1845703125;8887.640625;12619.607421875;8746.52734375;14544.36328125;16893.05859375;16893.05859375;11587.4814453125;15313.4111328125;16849.689453125;14854.0166015625;8209.611328125;16294.14453125;13095.4169921875;15505.494140625;11172.9599609375;11863.8447265625;14198.390625;13614.400390625;9932.8486328125;8306.841796875;13566.2607421875;12636.828125;8791.2177734375;10575.4228515625;13618.11328125;19875.88671875;15086.0615234375;8871.681640625;11583.4228515625;14065.546875;13238.91015625;9343.4853515625;11364.9580078125;8739.3056640625;12047.7529296875;14467.2001953125;10395.2626953125;12931.3388671875;11597.5791015625;12861.912109375;6973.4560546875;17986.9921875;14335.0390625;12065.1591796875;10714.869140625;9806.3115234375;10001.947265625;12940.21875;9086.7958984375;13099.6328125;14867.470703125;12623.2041015625;9724.4228515625;13379.330078125;14850.9814453125;8214.32421875;13825.501953125;11122.6474609375;8340.2265625;14214.095703125;17488.40234375;6675.00390625;10166.1953125;12447.8369140625;14368.1044921875;10560.3076171875;11482.083984375;14231.9609375;15152.9072265625;11442.0283203125;13742.017578125;11984.9599609375];
Yopt = [2097.972412109375;598.4401245117188;1279.433837890625;1596.6558837890625;2273.877197265625;1418.3846435546875;2868.01611328125;805.5610961914062;1947.5006103515625;1792.27783203125;1604.783935546875;578.293701171875;2334.23046875;118.61306762695312;1497.3441162109375;555.9097290039062;772.0440673828125;2097.685791015625;874.7717895507812;NaN;1257.4727783203125;1286.99951171875;818.04931640625;627.1981201171875;1373.111083984375;1481.258544921875;2737.13623046875;1267.4473876953125;1394.930419921875;369.9361267089844;1278.242919921875;NaN;2312.669189453125;2312.669189453125;1307.112060546875;1938.724365234375;2924.659423828125;2382.36181640625;1604.49609375;2698.24755859375;1307.2769775390625;1901.980224609375;432.90582275390625;1139.7843017578125;1577.7039794921875;2361.888916015625;166.63829040527344;1549.4346923828125;423.1343078613281;1247.1676025390625;NaN;853.0162963867188;977.5338745117188;3101.596923828125;1982.2491455078125;1346.043212890625;178.1013946533203;1608.6239013671875;2505.637451171875;611.3524780273438;980.6070556640625;579.1994018554688;1919.5037841796875;1944.643798828125;924.1048583984375;1551.8006591796875;2617.626220703125;1080.5394287109375;1003.372802734375;2081.017578125;2292.686767578125;1255.1893310546875;717.78955078125;937.222900390625;942.4212646484375;1712.642333984375;485.80999755859375;1321.348388671875;2489.076416015625;1108.931640625;553.8673095703125;1671.50439453125;2361.6865234375;1089.62255859375;1338.0867919921875;1235.580322265625;1049.845458984375;1974.134033203125;1901.0733642578125;1123.7713623046875;2291.87646484375;903.6826782226562;2940.824951171875;1088.736083984375;2323.54833984375;2032.7198486328125;2415.83251953125;455.0440673828125;1131.716552734375;1435.049560546875];
Yavg = [6303.05126953125;7430.0029296875;4785.10107421875;6372.06494140625;7683.01806640625;7959.04345703125;8902.0234375;6027.0078125;6809.05078125;7568.0302734375;6694.06884765625;5843.015625;9224.03515625;5015.00439453125;7752.017578125;3819.060302734375;4095.129150390625;6878.06005859375;4946.0048828125;5797.0517578125;4969.06005859375;5774.0;4348.1162109375;6096.01123046875;5153.0400390625;6418.02880859375;7430.015625;5866.07080078125;5153.04443359375;6303.04736328125;4141.07763671875;7637.02734375;8787.044921875;8787.044921875;5521.0126953125;8327.01953125;8695.0048828125;8097.05419921875;4946.00927734375;8396.0302734375;6947.05615234375;7614.0029296875;4578.03515625;4762.02880859375;7959.04931640625;6625.05908203125;4210.07666015625;4647.07421875;7522.05810546875;5935.08154296875;4923.09814453125;5291.0654296875;5728.05224609375;11179.005859375;7752.02099609375;4394.083984375;4256.01611328125;6993.0361328125;7752.017578125;4900.046875;6625.05224609375;4785.08642578125;6119.0712890625;7062.0390625;5544.05810546875;6855.0068359375;7131.0546875;5981.03857421875;4210.08740234375;9661.0146484375;7706.05078125;5613.08203125;5015.013671875;4693.0146484375;4762.01953125;6671.0205078125;3773.1220703125;6188.07080078125;7522.064453125;5774.01171875;4463.072265625;6809.0439453125;8189.00830078125;3635.101318359375;6349.0107421875;5797.0634765625;4187.02197265625;7361.0;7522.0673828125;4026.125732421875;6418.02490234375;6510.0810546875;8902.03125;5360.09033203125;6602.017578125;7246.025390625;8074.02001953125;6188.07080078125;7177.009765625;5544.06201171875];

thruput = [];
thruput(:,1) = [12.08; 11.98; 11.409; 10.85; 10.40; 10.63; 10.98; 11.37; 11.13; 10.77; 11.65; 13.8; 13.66; 13.51; 13.52; 14.04; 14.2; 13.81; 14.11; 13.32; 14.06; 13.93 ];
thruput(:,2) = [11.42; 11.07; 10.7; 10.12; 10.35; 10.53; 10.12; 10.52; 10.6; 10.3; 10.93; 11.06; 10.72; 9.76; 10.65; 12.7; 10.8; 11.80; 11.49; 11.37; 11.32; 11.85];
thruput(:,3) = [12.05; 11.73; 11.2; 10.7; 10.40; 10.6; 10.8; 11.1; 10.9; 10.6; 11.53; 13.21; 13; 13; 12.8; 13.4; 13.2; 13.48 ;13.22; 13.1; 12.96; 13.41];
thruput(:,4) = [1590 ; 1448; 1420; 1396; 1357; 1436; 1386; 1433; 1524; 1354; 1506; 1774; 2037; 2076; 2099; 1667; 1604; 1548; 1570; 1589; 1667; 1693];
sorted_thruput = sortrows(thruput,4);

figure
plot(sorted_thruput(:,4),sorted_thruput(:,1), 'LineWidth', 2);
hold on;
plot(sorted_thruput(:,4), sorted_thruput(:,2), 'LineWidth', 2 );
hold on;
plot(sorted_thruput(:,4), sorted_thruput(:,3) , 'LineWidth', 2);
axis([min(thruput(:,4)) max(thruput(:,4)) 5 15]);
xlabel('Number of Users');
ylabel('Throughput in MB / 10ms');
legend('Proposed Algorithm', 'Average', 'Maximum');
hold off;


blockage = [];
blockage(:,1) = [12;12;12;12;10;16;16;12;11;8;10;16;10;10;10;18;15;13;10;15;14;10;13;14;13;15;10;13;15;12;9;9;18;9;19;11;14;12;9;13;13;16;18;8;8;10;14;13;12;10;10;12;15;15;13;14;17;11;10;14;10;11;13;15;12;9;12;13;13;9;11;15;15;18;15;14;9;13;10;10;11;14;15;11;11;15;13;14;11;8;10;11;11;10;11;13;14;12;13;14;28;28;28;27;29;27;28;32;32;26;31;30;28;30;27;28;25;29;26;27;31;28;30;29;29;31;29;32;25;27;32;32;24;29;31;33;31;30;29;28;29;33;29;28;31;27;28;26;31;28;28;28;28;27;30;29;30;30;28;31;32;30;33;29;29;28;33;27;28;30;28;30;28;30;32;32;27;31;31;32;29;22;27;28;29;27;26;30;32;31;32;29;29;26;28;29;27;28;28;30;18;15;23;19;18;18;22;24;21;20;23;24;20;18;17;16;15;19;19;10;22;17;18;18;20;16;23;16;19;19;19;16;23;21;17;19;22;16;21;20;20;17;20;17;18;15;20;17;19;18;18;18;21;20;14;24;16;22;21;14;19;16;21;19;17;16;23;17;17;22;19;13;11;22;19;13;20;21;22;16;20;18;22;17;21;22;21;21;16;12;22;25;14;16;15;22;16;16;17;22];
blockage(:,2) = [1733;1583;1750;1714;1631;1634;1697;1709;1535;1564;1624;1740;1667;1614;1581;1731;1709;1814;1615;1596;1684;1590;1633;1698;1646;1658;1584;1667;1699;1636;1632;1721;1610;1641;1715;1617;1728;1655;1617;1662;1598;1575;1844;1609;1642;1614;1661;1647;1634;1545;1683;1674;1614;1685;1676;1708;1661;1646;1585;1733;1534;1713;1747;1639;1709;1639;1619;1624;1610;1595;1598;1600;1701;1719;1604;1701;1633;1641;1559;1635;1616;1668;1723;1781;1626;1622;1688;1756;1685;1701;1680;1658;1535;1574;1679;1751;1624;1717;1683;1572;2042;2069;2006;2079;2091;2036;2151;2052;2041;2045;1977;2120;2021;2101;2034;1993;2102;1993;2068;1917;2002;1927;2170;2101;2025;2041;2039;2225;2027;2136;2050;2191;2108;1914;2047;2126;2031;2125;2053;2012;1918;2086;2031;1936;2072;2028;1990;1980;2087;2090;2011;1953;2043;2048;2040;1947;2109;2072;2023;1989;2095;2101;2062;2142;2057;1888;2064;2093;2109;2094;2073;2076;2091;2055;2049;2160;2068;2184;2061;1956;1988;1980;2034;1954;1960;1984;2073;2134;2085;2115;2073;2083;2027;2093;1994;1946;2127;1987;2082;1924;1949;1855;1938;1837;1900;1962;1949;2006;1929;1899;1990;1915;1782;2008;1766;1909;1856;1925;1881;1819;1880;1819;1872;1847;1847;1822;1844;1878;1995;1809;1850;1765;1890;1810;1711;1745;1975;1829;1829;1981;1869;1887;2083;1729;1796;1933;2007;1713;1967;1754;1725;1827;1930;1902;1782;2008;1871;1931;1847;1889;1935;1885;1927;1946;1749;1672;1867;1952;1952;1929;2008;1739;1802;1884;1905;1620;1913;1980;1959;1775;1933;1846;1856;1933;1820;1921;2071;2071;1792;1762;2034;1895;1965;1898;1790;1880;1974;1777;1903;1908];
sorted_blockage = sortrows(blockage,2);

figure
plot(sorted_blockage(:,2),sorted_blockage(:,1), 'LineWidth', 1);
hold on;
axis([min(blockage(:,2)) max(blockage(:,2)) 0 65]);
xlabel('Total Number of Users of System');
ylabel('Blockage of users in %');
hold off;


plotty(1,1) = mean(Mmax);
plotty(2,1) = mean(Mopt);
plotty(3,1) = mean(Mavg);

plotty(1,2) = mean(Ymax);
plotty(2,2) = mean(Yopt);
plotty(3,2) = mean(Yavg);

figure
scatter(Mmax(:,1),Ymax(:,1),'or','filled','MarkerEdgecolor','k');
hold on;
scatter(Mopt(:,1),Yopt(:,1),'og','filled','MarkerEdgecolor','k');
hold on;
scatter(Mavg(:,1),Yavg(:,1),'oy','filled','MarkerEdgecolor','k');
xlabel('Number of RBs allocated');
ylabel('Product of Blockage and Wastage');
legend('Maximum RBs','RBs alloted by Proposed Algorithm','Average RBs alloted');
hold off;


figure
plot(ax(:,1),avg_sinrlist_macro(:,2),'LineWidth',1);
hold on;
plot(ax(:,1),practical_sinr_macro(:,1),'--k','LineWidth',2);
hold on;
plot(ax(:,1),theoritical_sinr_macro(:,1),'LineWidth',2);
xlabel('Number of Simulations');
ylabel('Average SINR');
legend('Simulated Macro SINRs','Avg. Simulated Macro SINR','Avg. Theoretical Macro SINR');
hold off;

figure
plot(ax(:,1),avg_sinrlist_pico1(:,2),'LineWidth',1);
hold on;
plot(ax(:,1),pico1(:,1),'--k','LineWidth',2);
hold on;
plot(ax(:,1),theoritical_sinr_pico(:,1),'LineWidth',2);
xlabel('Number of Simulations');
ylabel('Average SINR');
legend('Simulated Pico SINRs for random Pico','Avg. Simulated SINR for the same Pico','Avg. Theoretical Pico SINR');
hold off;